## TAREA PAQUETE DPLYR

# El paquete dplyr fue desarrollado por Hadley Wickham (RStudio) como una optimización 
# del paquete plyr. Este paquete no provee ninguna funcionalidad que no pueda 
# ser realizada con las funciones del paquete base, sino que su valor agregado está en la 
# simplicidad que provee para realizar tales operaciones. A su vez, dado que el paquete 
# está escrito en C++, las funciones que provee permiten hacer operaciones más rápido que
# su equivalente del paquete base.

# Las funciones principales que provee el paquete dplyr son:
  
# select: devuelve solo las columnas indicadas de un dataframe.
# filter: permite filtrar filas de una data frame según una expresión lógica.
# arrange: ordena las filas de un data frame en función de los valores de una o más columnas.
# rename: permite cambiar el nombre de una columna.
# mutate: permite agregar una nueva columna o transformar una existente.
# summarise: permite realizar resúmenes estadísticos de variables en un data frame.

# Todas estas funciones tiene la particularidad de que su primer argumento
# es el data frame al que le realizará la operación, mientras que los subsiguiente 
# argumentos describen como realizar tal operación.
# Finalmente el resultado de todas estas funciones es un nuevo data frame.

# Luego, otra función/operador que nos provee este paquete es el pipe (%>%).
# Este operador es usado para conectar la salida de una función con la entrada de la
# siguiente. Esto es muy útil dado que, como mencionamos, todas estas funciones tienen 
# como entrada un data frame, y como salida otro data frame por lo que el pipe nos 
# permite encadenarlas, y así mejorar la legibilidad del código. 

#Antes de comenzar a ver las funciones debemos instalar el paquete y cargarlo:

install.packages("dplyr")

require(dplyr)

#Para este ejemplo vamos a utilizar datos que ya estan precargados:
head(mtcars)
head(iris)


#SELECT
# La función select es usada para seleccionar columnas de un data frame que queremos 
# extraer. Por ejemplo, en el caso del dataset mtcars tenemos 11 columnas, pero solo 
# vamos a trabajar con algunas de ellas. Entonces mediante select podemos indicar 
# cuales columnas seleccionar, teniendo la posibilidad de hacerlo tanto mediante sus 
# indices como mediante su nombres.

head( select(mtcars, 1, 3) )
head( select(mtcars, mpg, disp) )


# En este ejemplo, hemos extraído las columnas mpg (1) y disp (3). 
# Ambas expresiones son equivalentes. La función head simplemente la utilizamos 
# para imprimir en pantalla solo 6 filas del dataset resultante.

# Por otra parte, la función select permite utilizar diferentes funciones 
# de ayuda (?select_helpers) para indicar las columnas a extraer:
  
 #  "-": selecciona todas las columnas menos las indicadas.

head( select(mtcars, -c(mpg, disp)) )

# ":": selecciona un rango de columnas.
head( select(mtcars, 1:3) )

# starts_with: selecciona todas las columnas que comiencen con el patrón indicado.
head( select(iris, starts_with("Petal")))

# ends_with: selecciona todas las columnas que terminen con el patrón indicado.
head( select(iris, ends_with("Width")))
# contains: selecciona las columnas que posean el patrón indicado.
head( select(iris, contains("etal")))

# matches: similar a contains, pero permite poner una expresión regular.
head( select(iris, matches(".t.")))

# everything: completa con las columnas del data frame no pasadas como argumento. 
# De esta forma se nos simplifican tareas de reordenar las columnas, poniendo primeras 
# las que nos interesen destacar.

head( select(iris, Species, everything()))

# one_of: selecciona las variables pasadas en un vector.
vars <- c("Petal.Length", "Petal.Width")

head( select(iris, one_of(vars)))




###FILTER
# Así como la función select es utilizada para seleccionar columnas, la función filter
# hace lo propio con las filas del data frame. Supongamos que queremos extraer los 
# automóviles del dataset mtcars que poseen 4 cilindros y más de 100 hp de potencia. 
# Entonces haríamos:
filter(mtcars, cyl == 4 & hp > 100)

# La expresión lógica de la función filter podemos hacer que sea tan compleja como 
# necesitemos. Hay que recordar que las para indicar múltiples condiciones utilizamos &
# (and), mientras que para indicar que conserve las filas que cumplen al menos un criterio
# usamos | (or).
